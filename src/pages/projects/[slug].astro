---
import BaseLayout from '../../layouts/BaseLayout.astro';
import FigureWithCaption from '../../components/FigureWithCaption.astro';
import CopyButton from '../../components/CopyButton.tsx';
import { getEntry, getCollection } from 'astro:content';

export async function getStaticPaths() {
  const entries = await getCollection('projects');
  return entries.map((p) => ({ params: { slug: p.slug } }));
}

const { slug } = Astro.params;
if (!slug) throw new Error('Missing slug');
const entry = await getEntry('projects', slug);
if (!entry) throw new Error(`Project not found: ${slug}`);
const { title, tags = [], summary, repo, language, date } = entry.data as any;
const year = new Date(date).getFullYear();

// Schema.org structured data for SoftwareSourceCode
const projectSchema = {
  '@context': 'https://schema.org',
  '@type': 'SoftwareSourceCode',
  name: title,
  description: summary,
  ...(repo && { codeRepository: repo }),
  ...(language && { programmingLanguage: language }),
  dateCreated: date.toISOString(),
  author: {
    '@type': 'Person',
    name: 'Andrew James Wildridge',
  },
  keywords: tags.join(', '),
};
---

<BaseLayout title={title} description={summary || `Project: ${title}`} schema={projectSchema}>
  <h1>{title}</h1>
  {summary && <p class="mt-2 text-gray-700 dark:text-gray-300">{summary}</p>}

  <div class="mt-3 flex gap-2 flex-wrap">
    <span class="sr-only">Project metadata:</span>
    {
      language && (
        <span class="inline-flex items-center rounded-full bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 px-2 py-0.5 text-xs">
          {language}
        </span>
      )
    }
    {
      year && (
        <span class="inline-flex items-center rounded-full bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 px-2 py-0.5 text-xs">
          {year}
        </span>
      )
    }
  </div>

  {
    tags.length > 0 && (
      <div>
        <span class="sr-only">Tags:</span>
        <ul class="mt-4 flex flex-wrap gap-2">
          {tags.map((t: string) => (
            <li>
              <span class="inline-flex items-center rounded-full bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300 px-2 py-0.5 text-xs">
                {t}
              </span>
            </li>
          ))}
        </ul>
      </div>
    )
  }

  <section class="mt-8" aria-labelledby="reproduce-heading">
    <h2 id="reproduce-heading" class="text-lg font-semibold">Reproduce</h2>
    <ul class="list-disc pl-6 mt-2">
      {
        repo && (
          <li>
            <span>Repo: </span>
            <a href={repo} class="underline" rel="noopener noreferrer" target="_blank">
              {repo}
            </a>
            <CopyButton
              client:load
              text={repo}
              className="ml-2 text-sm underline"
              ariaLabel="Copy repository URL"
            />
          </li>
        )
      }
      <li>Data: add link(s) here</li>
      <li>Instructions: add brief setup steps</li>
    </ul>
  </section>

  <section class="mt-8" aria-labelledby="architecture-heading">
    <h2 id="architecture-heading" class="text-lg font-semibold">Architecture</h2>
    <FigureWithCaption
      src="/images/placeholder-arch.svg"
      alt="Architecture diagram placeholder"
      caption="High-level architecture."
    />
  </section>
</BaseLayout>
